*commit 30/01:*

SecurityConfiguration.java
Configurada a seguran√ßa da aplica√ß√£o com endpoints permitAll e introdu√ß√£o do uso de UserDetails para autentica√ß√£o e autoriza√ß√£o.

M√©todo encoder()
Fun√ß√£o:
Retorna uma inst√¢ncia de BCryptPasswordEncoder, que implementa a interface PasswordEncoder do Spring Security.
Import√¢ncia:
O BCryptPasswordEncoder √© uma das formas mais seguras de armazenar senhas, pois aplica hashing e inclui um salt aleat√≥rio para cada senha, dificultando ataques de for√ßa bruta.
Par√¢metro:
O n√∫mero 10 representa a for√ßa do algoritmo (work factor), determinando a complexidade e o tempo gasto na criptografia.
M√©todo userDetailsService()
Fun√ß√£o:
Define o servi√ßo de autentica√ß√£o do Spring Security, associando uma implementa√ß√£o de UserDetailsService (CustomUserDetailsService) ao servi√ßo UsuarioService fornecido.
Motiva√ß√£o:
O Spring Security precisa de um UserDetailsService para buscar detalhes de usu√°rios (username, senha, roles) a partir de uma fonte personalizada, como um banco de dados.
Observa√ß√£o:
O trecho comentado com User.builder() cria usu√°rios em mem√≥ria, √∫til para testes, mas a pr√°tica recomendada √© carregar os dados do usu√°rio de uma fonte persistente, como est√° sendo feito com CustomUserDetailsService.
M√©todo securityFilterChain()
Fun√ß√£o:
Configura a cadeia de filtros de seguran√ßa do Spring Security para gerenciar autentica√ß√£o e autoriza√ß√£o.
Principais Configura√ß√µes:
Desabilita√ß√£o do CSRF: csrf(AbstractHttpConfigurer::disable) ‚Äî Desativa a prote√ß√£o CSRF, algo que pode ser justific√°vel para APIs REST.
Configura√ß√£o de Login:
formLogin(configurer -> configurer.loginPage("/login").permitAll());
Define uma p√°gina de login personalizada em /login, permitindo o acesso p√∫blico.
Autoriza√ß√£o de Requisi√ß√µes:
authorize.requestMatchers(HttpMethod.POST, "/usuario").permitAll(); ‚Äî Permite POST no endpoint /usuario sem autentica√ß√£o.
authorize.anyRequest().authenticated(); ‚Äî Exige autentica√ß√£o para todas as demais requisi√ß√µes.
Basic Authentication: httpBasic(Customizer.withDefaults()) ‚Äî Habilita a autentica√ß√£o b√°sica HTTP.
Motiva√ß√£o:
O SecurityFilterChain permite uma configura√ß√£o declarativa e program√°tica da seguran√ßa HTTP com flexibilidade para adaptar regras por endpoint.



GlobalExceptionHandler.java
Adicionada tratativa para exce√ß√£o AccessDeniedException, retornando status 403 Forbidden e mensagem personalizada:

@ResponseStatus(HttpStatus.FORBIDDEN)
@ExceptionHandler(AccessDeniedException.class)
public ErroRespostaDTO handleAcaoNaoPermitida(AccessDeniedException e) {
    return new ErroRespostaDTO(
            HttpStatus.FORBIDDEN.value(),
            "A√ß√£o n√£o permitida para esse usu√°rio",
            List.of());
}


Controller de Livro e Autor
Adicionadas a seguinte anota√ß√£o para controle de acesso para endpoints de leitura:
@PreAuthorize("hasAnyRole('ADMIN', 'USER')")

Adicionadas a seguinte anota√ß√£o para controle de acesso para endpoints de escrita/atualiza√ß√£o/dele√ß√£o:
@PreAuthorize("hasRole('ADMIN')")

Service de Livro e Autor
Inclus√£o de auditoria ao registrar um novo registro, associando o usu√°rio logado:
String usuarioLogado = securityService.obterUsuarioLogado();
novoRegistro.setUsuarioCriacao(usuarioLogado);


comando para buildar a aplica√ß√£o:
PS C:\repos\library> ./mvnw clean package -DskipTests

executar via power shell:
PS C:\repos\library> java -jar .\target\libraryapi-0.0.1-SNAPSHOT.jar

dockerizar a aplica√ß√£o:
1) acessar: https://hub.docker.com/_/maven

2) escolher uma tag que contenha o maven e o java

3) executar o comando  na pasta que contenha o Dockerfile configurado
'docker build --tag felipeAlves/library_api .'

4) exec comando para rodar a imagem que acabamos de criar :
docker run  --name library-api-container -e DB_URL=jdbc:postgresql://library-db:5432/library -e DB_USER=postgres -e DB_PASSWORD=admin -e GOOGLE_ID=941676976160-7frtkaf8lr8mib1im7m50elmcrfi6qvi.apps.googleusercontent.com -e GOOGLE_SECRET=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1 --network library-network -d -p 8080:8080 -p 9090:9090 felipeAlves/library_api

5) Criar tag com reposit√≥rio do Docker Hub
docker tag felipe/libraryapi felipeaaa/tag_library:1.0.0

6) Login no Docker Hub
docker login -u felipeaaa

7) Push da imagem
docker push felipeaaa/tag_library:1.0.0


Se tudo estiver correto, voc√™ ver√°:


Login Succeeded
PS C:\repos\library> docker push felipeaaa/tag_library:1.0.0
The push refers to repository [docker.io/felipeaaa/tag_library]
9fe0de22bd8b: Pushed
ba40bee57929: Pushed
28a610e2271c: Pushed
094089c4d1a0: Pushed
7c4587b2b28d: Pushed
1.0.0: digest: sha256:8bb639013d82071d2830b5adddb197b1382065bbec90e4c4ad260776cff5ea58 size: 856

E a imagem vai aparecer no Docker Hub em:
üîó hub.docker.com/repository/docker/felipeaaa/tag_library



# Publicando uma Imagem Docker no Docker Hub

## 1. Objetivo

Evitar que a imagem seja criada apenas localmente e garantir que ela seja enviada diretamente para sua conta no Docker Hub.

---

## 2. Acessar o Docker Hub no Terminal

```bash
# Faz login no Docker Hub pela CLI
docker login
```

> Isso garante que voc√™ esteja autenticado e possa publicar na sua conta. Se pular esse passo, a imagem ser√° criada apenas localmente.

---

## 3. Nomear a Imagem com Seu Usu√°rio

```bash
# Constr√≥i a imagem j√° com seu usu√°rio do Docker Hub no nome
docker build -t seuUsuario/seuRepositorio:tag .
```

> Substitua `seuUsuario` pelo seu nome de usu√°rio no Docker Hub.
> Exemplo: `docker build -t felipealves/library_api:latest .`

---

## 4. Subir a Imagem para o Docker Hub

```bash
# Envia a imagem para o reposit√≥rio remoto
docker push seuUsuario/seuRepositorio:tag
```

> A imagem agora est√° p√∫blica no seu Docker Hub e poder√° ser usada em qualquer lugar com `docker pull`.

---

## 5. Conclus√£o

Se voc√™ **n√£o fizer login** ou **n√£o nomear corretamente a imagem com seu usu√°rio**, ela ser√° criada **somente localmente**.

Para garantir que a imagem j√° v√° para sua conta:

1. Fa√ßa `docker login` antes de tudo;
2. Use `-t seuUsuario/seuRepositorio` no `docker build`.
