#se uma aplicação quiser se conectar ao servidor de autorização
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080

spring:
  application:
    name: libraryapi
    #colocar qual application vai rodar, no caso aqui ta rodando o "application-hmg.yml" ou as config no fim desse .yml
#  profiles:
#    active: hmg
# habilitar cor no log
  output:
    ansi:
      enabled: ALWAYS
#  configurações de banco
  datasource:
    url: ${DB_URL}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  config:
    import: optional:file:.env[.properties]
  jpa:
    show-sql: true
    properties:
      hibernate.format_sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_ID}
            client-secret: ${GOOGLE_SECRET}
  flyway:
    baseline-on-migrate: true

  springdoc:
    override-with-generic-response: false
logging:
  pattern:
#    console: '%clr(%d{dd-MM-yyyy HH:mm:ss}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger){cyan} %clr(:){yellow} %m%n'
#  file:
#    name: app.log
  level:
    root: warn
    com:
      github:
        felipeaaa1: info
management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
#        se quiser colocar só alguns colocar:
#        include: beans, logfile, health
        include: '*'

---
spring:
  config:
    activate:
      on:profile: prod
  jpa:
    show-sql: true

---
spring:
  config:
    activate:
      on:profile: hmg
  jpa:
    show-sql: true